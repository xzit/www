---
import Layout from "@/layouts/main.astro";
import Markdoc, { type Node } from "@markdoc/markdoc";
import { createReader } from "@keystatic/core/reader";
import keystaticConfig from "keystatic.config";

import {
  RiBlueskyFill,
  RiDownloadLine,
  RiFacebookCircleFill,
  RiGithubFill,
  RiInstagramLine,
  RiLinkedinFill,
  RiTwitterXFill,
  type RemixiconComponentType,
} from "@remixicon/react";
import ScrambleText from "@/components/ScrambleText";
import { buttonVariants } from "@/components/ui/button";
import { cn } from "@/lib/utils";

const { title, description } = Astro.props;

const reader = createReader(process.cwd(), keystaticConfig);
const home = await reader.singletons.home.read();

const iconMap: Record<string, { name: string; icon: RemixiconComponentType }> =
  {
    github: { name: "Github", icon: RiGithubFill },
    linkedin: { name: "LinkedIn", icon: RiLinkedinFill },
    facebook: { name: "Facebook", icon: RiFacebookCircleFill },
    instagram: { name: "Instagram", icon: RiInstagramLine },
    x: { name: "X", icon: RiTwitterXFill },
    bluesky: { name: "Bluesky", icon: RiBlueskyFill },
  };
---

<Layout title={title} description={description}>
  <aside class="mx-auto w-full max-w-7xl">
    <div
      class="flex flex-col gap-x-12 gap-y-8 p-4 md:px-8 md:py-10 lg:flex-row"
    >
      <div
        class="z-40 flex w-full flex-col gap-8 lg:sticky lg:top-24 lg:max-w-xs lg:self-start"
      >
        <div class="flex flex-col gap-4">
          <h1 class="font-logo text-7xl">
            <ScrambleText
              text={home?.about.title || ""}
              chars="01"
              client:load
            />
          </h1>
          <div
            class="text-muted-foreground [&_a]:hover:bg-foreground [&_a]:hover:text-background -indent-1 text-lg text-balance hyphens-auto [&_a]:underline [&_a]:decoration-2 [&_a]:underline-offset-3 [&_a]:hover:no-underline [&_article]:space-y-4"
            set:html={Markdoc.renderers.html(
              Markdoc.transform(home?.about.description?.node as Node),
            )}
          />
        </div>
        {
          home?.about.cv && (
            <div class="flex gap-4">
              <a
                href={home?.about.cv}
                target="_blank"
                rel="noopener noreferrer"
                class={cn(buttonVariants({ size: "lg" }), "")}
              >
                <RiDownloadLine className="size-5" />
                Descargar CV
              </a>
            </div>
          )
        }
        <div class="flex gap-4">
          {
            home?.about.social?.map(({ url, label }) => {
              const Icon = iconMap[label]?.icon;
              return (
                <a
                  href={url}
                  target="_blank"
                  rel="noopener noreferrer"
                  aria-label={iconMap[label]?.name}
                  class="text-foreground hover:text-muted-foreground transition-colors"
                >
                  {Icon && <Icon className="size-7" />}
                </a>
              );
            })
          }
        </div>
      </div>
      <slot />
    </div>
  </aside>
</Layout>
