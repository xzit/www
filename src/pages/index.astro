---
import "@/styles/global.css";
import Layout from "@/layouts/sidebar.astro";
import { createReader } from "@keystatic/core/reader";
import keystaticConfig from "keystatic.config";
import TechStack from "@/components/home/TechStack";
import Projects from "@/components/home/Projects.astro";
import Repos from "@/components/home/Repos.astro";
import LatestPosts from "@/components/home/LatestPosts.astro";
import { getCollection, type CollectionEntry } from "astro:content";
import { RiArrowRightLine } from "@remixicon/react";
import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

const reader = createReader(process.cwd(), keystaticConfig);
const home = await reader.singletons.home.read();
const settings = await reader.singletons.settings.read();

type Project = Awaited<ReturnType<typeof reader.collections.projects.read>>;
type FeaturedProject = (Project extends null ? never : Project) & {
  slug: string;
};

let projects: FeaturedProject[] = [];
if (home && Array.isArray(home.projects)) {
  const allFeatured = await Promise.all(
    home.projects.map(async (slug) => {
      const project = await reader.collections.projects.read(slug);
      return { ...project, slug } as FeaturedProject;
    })
  );
  projects = allFeatured.filter((project) => project !== null);
}

let repos: FeaturedProject[] = [];
if (home && Array.isArray(home.repos)) {
  const allFeatured = await Promise.all(
    home.repos.map(async (slug) => {
      const project = await reader.collections.projects.read(slug);
      return { ...project, slug } as FeaturedProject;
    })
  );
  repos = allFeatured.filter((project) => project !== null);
}

const allPosts: CollectionEntry<"posts">[] = await getCollection(
  "posts",
  (post: any) => post.data.published
);
const posts: CollectionEntry<"posts">[] = allPosts.sort(
  (a, b) =>
    new Date(b.data.published).getTime() - new Date(a.data.published).getTime()
);
---

<Layout
  title={home?.seo?.title || settings?.seo?.title}
  description={home?.seo?.description || settings?.seo?.description}
>
  <div class="flex-1 space-y-10">
    {
      projects.length !== 0 && (
        <div class="space-y-4">
          <h2 class="text-4xl">Proyectos</h2>
          <Projects items={projects} />
        </div>
      )
    }
    {
      home?.stack?.length !== 0 && (
        <div class="space-y-4">
          <h2 class="text-4xl">Tecnolog√≠as</h2>
          <TechStack stack={home?.stack ?? []} client:load />
        </div>
      )
    }
    {
      repos.length !== 0 && (
        <div class="space-y-4">
          <h2 class="text-4xl">Repositorios</h2>
          <Repos items={repos} />
        </div>
      )
    }
    {
      posts.length !== 0 && (
        <div class="space-y-4">
          <div class="flex justify-between gap-4">
            <h2 class="text-4xl">Blog</h2>
            <a
              href="/blog"
              class={cn(
                buttonVariants({ variant: "link", size: "sm" }),
                "inline-flex items-center gap-2"
              )}
            >
              Ver todo <RiArrowRightLine />
            </a>
          </div>
          <LatestPosts posts={posts.slice(0, 12)} />
        </div>
      )
    }
  </div>
</Layout>
